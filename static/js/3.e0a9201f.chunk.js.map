{"version":3,"sources":["../node_modules/shortid/lib/util/cluster-worker-id-browser.js","components/Contacts/Contacts.module.css","components/Form/Form.js","components/Contacts/Contacts.js","components/Filter/Filter.js","views/ContactsView.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/shortid/lib/alphabet.js","components/Form/Form.module.css","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js"],"names":["module","exports","connect","dispatch","onSubmit","name","number","contactsOperations","addContact","useState","setName","setNumber","contacts","useSelector","contactsSelectors","getContacts","useDispatch","handleChange","event","target","value","reset","nameInputId","shortid","generate","numberInputId","e","preventDefault","some","contact","alert","className","style","form","htmlFor","onChange","id","type","pattern","title","required","button","state","getVisibleContacts","onDeleteContacts","deleteContact","map","item","onClick","getFilter","changeFilter","fetchContacts","useEffect","Container","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","unsupportedIterableToArray","TypeError","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","setCharacters","_alphabet_","Error","unique","split","filter","ind","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","splice","shuffle","get","characters","seed","lookup","index","build","isValid","clusterWorkerId","seedValue","worker","workerId","newCharacters","_seed_","counter","previousSeconds","str","seconds","Date","now","random","format","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","mask","log","LN2","step","RegExp","replace","test"],"mappings":"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","file":"static/js/3.e0a9201f.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = 0;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Contacts_button__3QgB3\",\"item\":\"Contacts_item__3wRy4\"};","import { useState } from 'react';\nimport style from './Form.module.css';\nimport shortid from 'shortid';\nimport { connect } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsSelectors, contactsOperations } from '../../redux/contacts';\n\nfunction Form() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (contacts.some(contact => contact.name === name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    dispatch(contactsOperations.addContact({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  return (\n    <form onSubmit={handleSubmit} className={style.form}>\n      <label htmlFor={nameInputId}>\n        <p>Name</p>\n        <input\n          value={name}\n          onChange={handleChange}\n          id={nameInputId}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n\n      <label htmlFor={numberInputId}>\n        <p>Number</p>\n\n        <input\n          value={number}\n          onChange={handleChange}\n          id={numberInputId}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n\n      <button type=\"submit\" className={style.button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) => dispatch(contactsOperations.addContact(name, number)),\n});\n\nexport default connect(null, mapDispatchToProps)(Form);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './Contacts.module.css';\nimport { connect } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\n\nconst Contacts = ({ contacts, onDeleteContacts }) => (\n  <ul>\n    {contacts.map(({ id, name, number }) => (\n      <li key={id} className={style.item}>\n        <p>{name}</p>\n        <span>{number}</span>\n        <button\n          type=\"button\"\n          onClick={() => onDeleteContacts(id)}\n          className={style.button}\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nContacts.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string.isRequired)),\n  onDeleteContacts: PropTypes.func.isRequired,\n};\n\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContacts: id => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// import style from './Filter.module.css';\nimport { connect } from 'react-redux';\nimport { contactsSelectors, changeFilter } from '../../redux/contacts';\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    <p>Find contacts by name</p>\n    <input type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value:  contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import Container from '../components/Container/Container';\r\nimport Form from '../components/Form/Form';\r\nimport Contacts from '../components/Contacts/Contacts';\r\nimport Filter from '../components/Filter/Filter';\r\n// import AppBar from './Components/AppBar/AppBar';\r\nimport { connect } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { contactsOperations } from '../redux/contacts';\r\n// import { Switch, Route } from 'react-router-dom';\r\n// import HomeView from './views/HomeView';\r\n// import LoginView from './views/LoginView';\r\n\r\nfunction ContactsView() {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\r\n\r\n  return (\r\n    <Container>\r\n      <h1>Phonebook</h1>\r\n      <Form />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <Contacts />\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\nexport default connect(null, mapDispatchToProps)(ContactsView);","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__2gAxB\",\"button\":\"Form_button__-fPjk\"};","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n"],"sourceRoot":""}